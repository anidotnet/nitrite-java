/*
 *
 * Copyright 2017-2018 Nitrite author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports/jacoco/test")
}

ext {
    limits = [
            'instruction': 93,
            'branch'     : 88,
            'line'       : 91,
            'complexity' : 84,
            'method'     : 87,
            'class'      : 95 //TODO - 100%
    ]
}

jacocoTestReport {
    group = "Reporting"
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml {
            enabled = true
            destination = new File(buildDir, "reports/jacoco/report.xml")
        }
        html {
            enabled = true
            destination = new File(buildDir, "reports/coverage")
        }
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/dizitart/no2/fulltext/languages/**',
                    'org/dizitart/no2/sync/data/**',
                    '**/*KeyValuePair**',
                    '**/*FindResult**',
                    '**/*IndexMeta**',
                    '**/*Exception**',
                    '**/*ErrorCodes**',
                    '**/*Attributes**',
                    '**/*ChangeInfo**',
                    '**/*UserCredential**',
                    '**/*Constants**'
            ])
        })
    }

    doLast {
        def report = file("${buildDir}/reports/jacoco/report.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def coverageResult = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                coverageResult.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (coverageResult) {
            logger.log(LogLevel.ERROR, "------------------ Code Coverage Results -----------------------")
            coverageResult.each {
                logger.log(LogLevel.ERROR, it)
            }
            logger.log(LogLevel.ERROR, "---------------------------------------------------------------")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }

        logger.log(LogLevel.ERROR, "Code Coverage : " + metrics['instruction'] + '%')
        logger.log(LogLevel.ERROR, "---------------------------------------------------------------")
    }
}

check.dependsOn jacocoTestReport