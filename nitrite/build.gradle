/*
 *  Copyright 2017-2019 Nitrite author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'signing'
    id 'maven'
    id 'com.github.hauner.jarTest'
}

apply from: 'jacoco.gradle'
apply from: 'asciidoc.gradle'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

jar {
    archivesBaseName = 'nitrite'
}

dependencies {
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "com.h2database:h2-mvstore:$h2Version"
//    compile "org.objenesis:objenesis:$objenesisVersion"
//    compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion") {
//        exclude module: 'jackson-annotations'
//    }
//    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "org.jasypt:jasypt:$jasyptVersion"
//    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
//    compile "org.locationtech.jts:jts-core:$jtsVersion"

    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
    testCompile "org.openjdk.jmh:jmh-core:$jmhVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "uk.co.jemos.podam:podam:$podamVersion"
    testCompile "org.apache.lucene:lucene-core:$luceneVersion"
    testCompile "org.apache.lucene:lucene-analyzers-common:$luceneVersion"
    testCompile "org.apache.lucene:lucene-queryparser:$luceneVersion"
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
    testCompile "org.apache.logging.log4j:log4j-core:$log4j2Version"
    testCompile "org.awaitility:awaitility:$awaitilityVersion"
    testCompile "joda-time:joda-time:$jodaTimeVersion"
    testCompile "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testCompile "org.meanbean:meanbean:$meanbeanVersion"
}

gradle.buildFinished { BuildResult result ->
    if (result.failure && !JavaVersion.current().isJava8Compatible()) {
        println("\n* Warning:\nJDK ${JavaVersion.VERSION_1_8} is minimal requirement for building nitrite. " +
                "You have ${JavaVersion.current()}.")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

test {
    testLogging.showStandardStreams = false
    testLogging.exceptionFormat = 'full'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

nexusStaging {
    username = System.getenv('OSSRH_USER')
    password = System.getenv('OSSRH_PASSWORD')
}

uploadArchives {
    onlyIf {
        project.hasProperty('release') || version.endsWith("SNAPSHOT")
    }

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('OSSRH_USER'),
                        password: System.getenv('OSSRH_PASSWORD'))
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: System.getenv('OSSRH_USER'),
                        password: System.getenv('OSSRH_PASSWORD'))
            }

            pom.project {
                packaging 'jar'
                name 'Nitrite'
                description 'An in-memory, single-file based embedded nosql persistent document store.'
                url 'https://github.com/dizitart/nitrite-database'
                scm {
                    url 'git@github.com:dizitart/nitrite-database.git'
                    connection 'scm:git:git@github.com:dizitart/nitrite-database.git'
                    developerConnection 'scm:git:git@github.com:dizitart/nitrite-database.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'anidotnet'
                        name 'Anindya Chatterjee'
                        email 'anidotnet@gmail.com'
                        organization 'Dizitart'
                    }
                }
            }
        }
    }
}

sourceSets {
    jmh {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

dependencies {
    jmhCompile project
    jmhCompile "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmhCompile "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks', group:'Development') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '')
    def exclude = project.properties.get('exclude')
    def format = project.properties.get('format', 'json')
    def profilers = project.properties.get('profilers')
    def jvmArgs = project.properties.get('jvmArgs')

    def resultFile = file("build/reports/jmh/result.${format}")
    resultFile.parentFile.mkdirs()

    args include
    if(exclude) {
        args '-e', exclude
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx512m'
    args '-jvmArgsPrepend', '-Xms512m'
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
    }
}